import './App.css';

import React from 'react';

import PropTypes from 'prop-types';

import moment from "moment";

import {
  Input,
  Button,
  MobileStepper,
  NativeSelect,
  option,
  makeStyles,
  Box,
  AppBar,
  Tabs,
  Tab,
  RadioGroup,
  Radio,
  FormControlLabel,
} from '@material-ui/core';

import {
  KeyboardArrowLeft,
  KeyboardArrowRight
} from '@material-ui/icons';

import GoogleMapReact from 'google-map-react';

import DatePicker from 'react-datepicker';

import 'react-datepicker/dist/react-datepicker.css';

const TabPanel = (props) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box p={3}>
          {children}
        </Box>
      )}
    </div>
  );
} // TabPanel

TabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.any.isRequired,
  value: PropTypes.any.isRequired,
};

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
    backgroundColor: theme.palette.background.paper,
  },
}));

const Instructions = () => (
  <>
    <h3>Welcome:</h3>
    <p>
      Cover crops can provide nitrogen (N) to the following cash crops by scavenging N in the soil or, in the case of legumes, by fixing N from the atmosphere.
      However, some cover crops can reduce the available N to following cash crops by immobilization.
      It can be difficult to know how much available N a cover crop will provide or if it will immobilize N.
      The amount of available N depends on the amount of biomass and the cover crop quality as well as soil temperature and moisture conditions.
      This calculator was developed to help provide guidance for N management when using cover crops.
    </p>

    <h3>What to Expect from the Nitrogen Calculator:</h3>
    <p>
      This calculator will predict how much and when nitrogen will be available from aboveground cover crop biomass.
    </p>
    <ul>
      <li>If the calculator gives you a <strong>positive number</strong>, this is a <strong>N credit</strong>, which can be subtracted from your target N fertilizer rate.</li>
      <li>If the calculator gives you a <strong>negative number</strong>, this is a <strong>N debit</strong>, and you should add additional N fertilizer at planting to account for the N immobilized by the cover crop.</li>
    </ul>
    <p>
      You will need to have measured <strong>cover crop biomass</strong> in your field and have an <strong>analysis of the cover crop</strong> nitrogen, carbohydrates, cellulose and lignin to use this calculator.
    </p>

    <h3>Instructions:</h3>
    <p>
      Click the calculator tab located in the red bar above to start.
      Answer questions in order to use the calculator.
      If you have questions, use the contact tab for any help with the calculator.
      We will get back to you as soon as possible.
    </p>
  </>
) // Instructions

const Contact = () => (
  <>
    <p>
      For questions about how to use the calculator,
      <a target="_blank" rel="noreferrer" href="http://extension.uga.edu/county-offices.html" tabIndex="-1">contact your local County Extension Agent</a>.
    </p>

    <p>Additional information can be found in the following Extension publications:</p>

    <ul>
      <li>
        Predicting Nitrogen Release from Cover Crops: the Cover Crop Nitrogen Availability Calculator -<br/>
        <a target="_blank" rel="noreferrer" href="http://extension.uga.edu/publications/detail.html?number=B1466" tabIndex="-1">extension.uga.edu/publications/detail.html?number=B1466</a>
      </li>
      <li>
        Cover Crop Biomass Sampling -<br/>
        <a target="_blank" rel="noreferrer" href="http://extension.uga.edu/publications/detail.html?number=C1077" tabIndex="-1">extension.uga.edu/publications/detail.html?number=C1077</a><p></p>
      </li>
    </ul>
  </>
) // Contact

const App = () => {
  const Marker = () => <div style={{border: '1px solid black', background: 'yellow', width: '1em', transform: 'translate(-50%, -50%)'}}>X</div>;

  const Map = (props) => {
    const mapChange = (e) => {
      sets.lat(+e.lat.toFixed(4));
      sets.lng(+e.lng.toFixed(4));
    } // mapChange

    return (
      <div style={{ height: '200px', width: '300px' }}>
        <GoogleMapReact
          bootstrapURLKeys={{ key: 'AIzaSyD8U1uYvUozOeQI0LCEB_emU9Fo3wsAylg' }}
          center={{lat: +parms.lat, lng: +parms.lng}}
          defaultZoom={11}
          yesIWantToUseGoogleMapApiInternals
          onClick={mapChange}
        >
          <Marker
            lat={+parms.lat}
            lng={+parms.lng}
          />
        </GoogleMapReact>
      </div>
    );
  } // Map

  const Screen = () => {
    const CoverCrop = () => (
      <>
        <NativeSelect
          {...ps('crop')}
        >
          {/* Grains */}
          {'Barley|Black oat|Cereal Rye|Millet|Pearl millet|German millet|Foxtail millet|Proso millet|Oat|Ryegrass|Sorghum/Sudangrass|Sorghum|Triticale|Wheat'
            .split('|')
            .map(s => <option value={s} key={s}>{s}</option>)
          }

          {/* Legumes */}
          {'Alfalfa|Berseem clover|Common vetch|Hairy vetch|Crimson clover|Red clover|Balansa clover|Subterranea|Cowpea|Austria pea|Field peas (Iron & Clay)|Sunn hemp|Soybean|Lupine|Pigeon pea|White clover'
            .split('|')
            .map(s => <option value={s} key={s}>{s}</option>)
          }

          {/* Broadleaves */}
          {'Radish|Mustard|Turnip|Canola|Rape|Buckwheat'
            .split('|')
            .map(s => <option value={s} key={s}>{s}</option>)
          }
        </NativeSelect>
        <br />
        Other: 
        <Input
          {...ps('coverCropOther')}
        />
      </>
    ) // CoverCrop

    const Screen1 = () => (
      <>
        <p>
          If you need instructions, click the <strong>Instructions</strong> tab above.
        </p>
        <p>
          Please answer the questions below and click "Next Page" when complete.
        </p>
        <hr/>
        <h2>Background</h2>

        <table>
          <tbody>
            <tr>
              <td>
                Please enter your name
              </td>
              <td>
                <Input
                  {...ps('name')}
                />
              </td>
            </tr>

            <tr>
              <td>
                Please enter the field name
              </td>
              <td>
                <Input
                  {...ps('field')}
                />
              </td>
            </tr>

            <tr>
              <td>
                Enter the sample ID
              </td>
              <td>
                <Input
                  {...ps('sample')}
                />
              </td>
            </tr>

            <tr>
              <td colSpan="2">
                <Map />
              </td>
            </tr>

            <tr>
              <td>
                Latitude:&nbsp;
                <Input
                  {...ps('lat')}
                />
              </td>
            </tr>

            <tr>
              <td>
                Longitude:&nbsp;
                <Input
                  {...ps('lng')}
                />
              </td>
            </tr>

            <tr>
              <td>
                What is the CASH crop?
              </td>
              <td>
                <select id="cashCrop" data-test="007 Sweet Sorghum" data-placeholder="Search for a crop">
                  <option></option>
                </select>
              </td>
            </tr>

            <tr>
              <td>
                What is your target nitrogen fertilizer rate?
                <div className="cropSheet">
                  (If unknown, see crop recommendation sheet for your cash crop <a target="cropSheet" className="cropSheet" href=".">here</a>.)
                </div>
              </td>
              <td>
                <Input
                  {...ps('targetN')}
                /> lbs N/acre
                <div id="NRate"></div>
              </td>
            </tr>

            <tr>
              <td>
                What is the planting date of the cash crop?
              </td>
              <td>
                <DatePicker 
                  selected={parms.plantingDate}
                  onChange={date => sets.plantingDate(date)}
                />
              </td>
            </tr>
            <tr>
              <td>
                What is the COVER CROP?
              </td>
              <td>
                <CoverCrop />
              </td>
            </tr>

            <tr>
              <td>
                When was the cover crop killed or incorporated?
              </td>
              <td>
                <DatePicker 
                  selected={parms.coverCropDate}
                  onChange={date => sets.coverCropDate(date)}
                />
              </td>
            </tr>
          </tbody>
        </table>
      </>
    ) // Screen1

    const Screen2 = () => (
      <>
        <table>
          <tbody>
            <tr>
              <td>
                Is this a high organic matter soil?<br/>
                <small>(High organic matter soils are usually those that have been managed using conservation tillage with cover crops or organically for at least three years.)</small>
              </td>
              <td>
                <RadioGroup 
                  value={parms.highOM}
                >
                  <FormControlLabel value="Yes" control={<Radio id="highOM" />} label="Yes" />
                  <FormControlLabel value="No"  control={<Radio id="highOM" />} label="No" />
                </RadioGroup>            
              </td>
            </tr>

            <tr>
              <td>
                Cover crop residue will be
              </td>
              <td>
                <RadioGroup 
                  value={parms.nutrient}
                >
                  <FormControlLabel value="Incorporated"         control={<Radio id="nutrient" />} label="Incorporated" />
                  <FormControlLabel value="Left on the surface"  control={<Radio id="nutrient" />} label="Left on the surface" />
                </RadioGroup>            
              </td>
            </tr>

            <tr>
              <td>
                Dry cover crop biomass
              </td>
              <td>
                <Input
                  {...ps('biomass')}
                />
                lbs/A
              </td>
            </tr>
          </tbody>
        </table>

        <table>
          <tbody>
            <tr>
              <td>
                Nitrogen in cover crop
              </td>
              <td>
                <Input
                  {...ps('N')}
                 />
                 0.3-5.0%
              </td>
            </tr>

            <tr>
              <td>
                Carbohydrates in cover crop
              </td>
              <td>
                <Input
                  {...ps('carb')}
                />
                0-100%
              </td>
            </tr>

            <tr>
              <td>
                Cellulose in cover crop
              </td>
              <td>
                <Input
                  {...ps('cellulose')}
                />
                0-100%
              </td>
            </tr>

            <tr>
              <td>
                Lignin in cover crop
              </td>
              <td>
                <Input
                  {...ps('lignin')}
                />
                0-100%
              </td>
            </tr>

            <tr>
              <td colSpan="2" className="center">
                <small>Carbohydrates + Cellulose + Lignin should equal 100%</small>
              </td>
            </tr>
          </tbody>
        </table>
      </>
    ) // Screen2

    const Screen3 = () => (
      <>
        <h3>
          Is this information correct?
        </h3>

        <table>
          <tbody>
            <tr><td>Name                                 </td><td><strong>{parms.name}</strong></td></tr>
            <tr><td>Field Name                           </td><td><strong>{parms.field}</strong></td></tr>
            <tr><td>Sample ID                            </td><td><strong>{parms.sample}</strong></td></tr>
            <tr><td>Cash Crop                            </td><td><strong>{parms.crop}</strong></td></tr>
            <tr><td>Cash Crop Planting Date              </td><td><strong>{moment(parms.plantingDate).format('MM/DD/yyyy')}</strong></td></tr>
            <tr><td>Target Nitrogen Fertilizer Rate      </td><td><strong>{parms.targetN}</strong> lbs/A</td></tr>
            <tr><td>Cover Crop                           </td><td><strong>{parms.CoverCrop}</strong></td></tr>
            <tr><td>Cover Crop Termination Date          </td><td><strong>{moment(parms.coverCropDate).format('MM/DD/yyyy')}</strong></td></tr>
            <tr><td>High Organic Matter Soil             </td><td><strong>{parms.highOM}</strong></td></tr>
            <tr><td>Cover crop residue was               </td><td><strong>{parms.nutrient}</strong></td></tr>
            <tr><td>Dry Cover Crop Biomass               </td><td><strong>{parms.biomass}</strong> lbs/A</td></tr>
            <tr><td>Nitrogen in Cover Crop               </td><td><strong>{parms.N}</strong> %</td></tr>
            <tr><td>Carbohydrates in Cover Crop          </td><td><strong>{parms.carb}</strong> %</td></tr>
            <tr><td>Cellulose in Cover Crop              </td><td><strong>{parms.cellulose}</strong> %</td></tr>
            <tr><td>Lignin in Cover Crop                 </td><td><strong>{parms.lignin}</strong> %</td></tr>
          </tbody>
        </table>
      </>
    ) // Screen3

    const Steps = [Screen1, Screen2, Screen3];

    const [activeStep, setActiveStep] = React.useState(0);

    const maxSteps = Steps.length;

    const ps = (s) => ({
      id: s,
      value: parms[s],
    });

    const State = (parm, value) => [parms[parm], sets[parm]] = React.useState(value);  // can't do useState in a loop unless it's in a component, even if that component is unused

    for (const [parm, value] of Object.entries(parms)) {
      State(parm, value);
    }

    console.log(sets);

    return (
      <div onChange={(e) => sets[e.target.id](e.target.value)}>
        {Steps[activeStep]()}

        <MobileStepper
          steps={maxSteps}
          position="static"
          variant="text"
          activeStep={activeStep}
          nextButton={
            <Button
              size="small"
              onClick={() => setActiveStep((step) => step + 1)}
              disabled={activeStep === maxSteps - 1}
            >
              Next Page
              {<KeyboardArrowRight />}
            </Button>
          }
          backButton={
            <Button
              size="small"
              onClick={() => setActiveStep((step) => step - 1)}
              disabled={activeStep === 0}
            >
              {<KeyboardArrowLeft />}
              Back
            </Button>
          }
        />
      </div>
    )
  } // Screen

  const classes = useStyles();
  const [tab, setTab] = React.useState(0);

  return (
    <div className={classes.root}>
      <AppBar position="static">
        <Tabs value={tab} onChange={(_, newValue) => setTab(newValue)}>
          <Tab label="Calculator"  />
          <Tab label="Instructions"  />
          <Tab label="Contact" />
        </Tabs>
      </AppBar>
      <TabPanel value={tab} index={0}>
        <Screen/>
      </TabPanel>
      <TabPanel value={tab} index={1}>
        <Instructions/>
      </TabPanel>
      <TabPanel value={tab} index={2}>
        <Contact/>
      </TabPanel>
    </div>
  );
} // App

const test = true;

const parms = {
  name            : test ? 'Rick Hitchcock' : '',
  field           : test ? 'My field' : '',
  sample          : test ? 'My sample' : '',
  targetN         : test ? '100' : '',
  plantingDate    : test ? new Date('03/04/2020') : '',
  crop            : test ? 'Oat' : '',
  coverCropDate   : test ? new Date('06/04/2020') : '',
  lat             : test ? 33.9357 : '',
  lng             : test ? -83.3311 : '',
  coverCropOther  : '',
  N               : test ? 2.5 : '',
  carb            : test ? 20 : '',
  cellulose       : test ? 30 : '',
  lignin          : test ? 50 : '',
  highOM          : 'No',
  nutrient        : 'Incorporated',
  biomass         : test ? 9999 : '',
}

const sets = {};

document.title = 'Decomp';

export default App;